// Prisma schema for Career Advisor Platform

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  firstName     String?
  lastName      String?
  avatar        String?
  avatarUrl     String?   @map("avatar_url")
  bio           String?
  currentGoal   String?
  skills        String?   // JSON array of user skills
  interests     String?   // JSON array of interests
  preferences   String?   // JSON object of user preferences
  avatarConfig  String?   // JSON config for 3D avatar
  
  // Subscription Management
  subscriptionTier    String   @default("free") // free, basic, premium, elite
  subscriptionStatus  String   @default("active") // active, canceled, expired, payment_failed
  subscriptionStarted DateTime?
  subscriptionExpires DateTime?
  paymentProvider     String?  // stripe, razorpay
  customerId         String?   // provider customer ID
  subscriptionId     String?   // provider subscription ID
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relationships
  quizResults     QuizResult[]
  savedColleges   SavedCollege[]
  progress        UserProgress[]
  roadmaps        CareerRoadmap[]
  achievements    Achievement[]
  recommendations AIRecommendation[]
  skillAssessments SkillAssessment[]
  chatConversations ChatConversation[]
  subscriptions   Subscription[]
  usageMetrics    UsageMetric[]
  
  @@map("users")
}

// Quiz System
model QuizResult {
  id          String   @id @default(cuid())
  userId      String
  answers     String   // JSON string of quiz answers
  careerPath  String?  // Recommended career path
  score       Int?     // Overall compatibility score
  interests   String   // JSON array of interests
  skills      String   // JSON array of skills
  createdAt   DateTime @default(now())
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("quiz_results")
}

// College Database
model College {
  id            String   @id @default(cuid())
  name          String
  location      String
  state         String
  city          String
  type          String   // Government, Private, etc.
  established   Int?
  website       String?
  courses       String   // JSON array of available courses
  cutoff        String?  // JSON object with cutoff data
  fees          String?  // JSON object with fee structure
  latitude      Float?
  longitude     Float?
  rating        Float?   @default(0)
  image         String?
  
  // Relationships
  savedBy       SavedCollege[]
  
  @@map("colleges")
}

// User's Saved Colleges
model SavedCollege {
  id         String   @id @default(cuid())
  userId     String
  collegeId  String
  notes      String?
  createdAt  DateTime @default(now())
  
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  college    College  @relation(fields: [collegeId], references: [id], onDelete: Cascade)
  
  @@unique([userId, collegeId])
  @@map("saved_colleges")
}

// User Progress Tracking
model UserProgress {
  id            String   @id @default(cuid())
  userId        String
  milestone     String   // Type of milestone (quiz_completed, college_saved, etc.)
  description   String
  completed     Boolean  @default(false)
  completedAt   DateTime?
  createdAt     DateTime @default(now())
  
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_progress")
}

// Career Paths
model CareerPath {
  id              String   @id @default(cuid())
  name            String   @unique
  description     String
  requiredSkills  String   // JSON array
  averageSalary   String?
  growthProspect  String?
  education       String   // Required education level
  relatedCourses  String   // JSON array of course names
  createdAt       DateTime @default(now())
  
  @@map("career_paths")
}

// Quiz Questions
model QuizQuestion {
  id         String   @id @default(cuid())
  question   String
  type       String   // multiple_choice, scale, text
  options    String?  // JSON array for multiple choice
  category   String   // interests, skills, preferences
  weight     Float    @default(1.0)
  order      Int
  active     Boolean  @default(true)
  
  @@map("quiz_questions")
}

// AI-Powered Career Roadmaps
model CareerRoadmap {
  id           String   @id @default(cuid())
  userId       String
  title        String
  description  String?
  careerGoal   String
  currentLevel String   // beginner, intermediate, advanced
  duration     Int      // estimated duration in months
  nodes        String   // JSON array of roadmap nodes
  connections  String   // JSON array of node connections
  progress     Float    @default(0) // completion percentage
  aiGenerated  Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("career_roadmaps")
}

// Achievement System
model Achievement {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String
  type        String   // skill, milestone, quiz, project
  icon        String?
  color       String?  // hex color for badge
  points      Int      @default(0)
  unlockedAt  DateTime @default(now())
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("achievements")
}

// Roadmap Node Details
model RoadmapNode {
  id           String   @id @default(cuid())
  title        String
  description  String
  type         String   // skill, project, certification, course, internship, job
  difficulty   String   // beginner, intermediate, advanced
  duration     Int?     // estimated time in weeks
  resources    String?  // JSON array of learning resources
  prerequisites String? // JSON array of prerequisite node IDs
  skills       String?  // JSON array of skills learned
  category     String   // technical, soft_skills, domain_specific
  priority     Int      @default(1) // 1-5 priority level
  
  @@map("roadmap_nodes")
}

// Learning Resources
model LearningResource {
  id          String   @id @default(cuid())
  title       String
  description String?
  type        String   // course, book, video, article, project, tool
  url         String?
  provider    String?  // Coursera, YouTube, GitHub, etc.
  difficulty  String   // beginner, intermediate, advanced
  duration    String?  // estimated time
  cost        String   // free, paid
  rating      Float?   @default(0)
  tags        String?  // JSON array of tags
  
  @@map("learning_resources")
}

// AI Recommendations
model AIRecommendation {
  id            String   @id @default(cuid())
  userId        String
  type          String   // career, skill, college, course
  title         String
  description   String
  reasoning     String   // AI explanation for the recommendation
  confidence    Float    // 0-1 confidence score
  data          String   // JSON object with recommendation data
  viewed        Boolean  @default(false)
  dismissed     Boolean  @default(false)
  createdAt     DateTime @default(now())
  
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("ai_recommendations")
}

// Skill Assessments
model SkillAssessment {
  id         String   @id @default(cuid())
  userId     String
  skillName  String
  level      String   // beginner, intermediate, advanced, expert
  score      Int      // 0-100 proficiency score
  source     String   // quiz, self_assessment, project, certification
  evidence   String?  // JSON array of evidence/proof
  lastTested DateTime @default(now())
  
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, skillName])
  @@map("skill_assessments")
}

// Chat Conversations
model ChatConversation {
  id          String   @id @default(cuid())
  userId      String?  // Optional for anonymous users
  sessionId   String?  // Track anonymous sessions
  title       String?  // Auto-generated conversation title
  messages    String   // JSON array of messages
  metadata    String?  // JSON object with conversation metadata
  isActive    Boolean  @default(true)
  lastMessage DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user         User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  chatMessages ChatMessage[]
  
  @@index([userId])
  @@index([sessionId])
  @@index([lastMessage])
  @@map("chat_conversations")
}

// Chat Messages (for detailed tracking)
model ChatMessage {
  id             String   @id @default(cuid())
  conversationId String
  role           String   // user, assistant, system
  content        String
  metadata       String?  // JSON object with message metadata (tokens, model, etc.)
  timestamp      DateTime @default(now())
  
  conversation   ChatConversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  @@index([conversationId])
  @@index([timestamp])
  @@map("chat_messages")
}

// Subscription Management
model Subscription {
  id              String   @id @default(cuid())
  userId          String
  tier            String   // basic, premium, elite
  status          String   // active, canceled, expired, past_due, trialing
  billing         String   // monthly, quarterly, annual
  amount          Float    // subscription amount
  currency        String   @default("USD")
  paymentProvider String   // stripe, razorpay
  providerId      String   // provider subscription ID
  customerId      String   // provider customer ID
  startDate       DateTime
  endDate         DateTime?
  nextBilling     DateTime?
  canceledAt      DateTime?
  cancelReason    String?
  metadata        String?  // JSON object for additional data
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  payments        Payment[]
  
  @@index([userId])
  @@index([status])
  @@index([tier])
  @@map("subscriptions")
}

// Payment Tracking
model Payment {
  id              String   @id @default(cuid())
  subscriptionId  String
  amount          Float
  currency        String   @default("USD")
  status          String   // succeeded, pending, failed, refunded
  paymentProvider String   // stripe, razorpay
  providerId      String   // payment intent/transaction ID
  paymentMethod   String?  // card, wallet, etc.
  failureReason   String?
  refundAmount    Float?
  refundedAt      DateTime?
  paidAt          DateTime?
  createdAt       DateTime @default(now())
  
  subscription    Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  
  @@index([subscriptionId])
  @@index([status])
  @@map("payments")
}

// Usage Metrics for Billing & Analytics
model UsageMetric {
  id         String   @id @default(cuid())
  userId     String
  metric     String   // chat_messages, roadmaps_created, ai_calls
  value      Int      // usage count
  period     String   // daily, monthly, billing_cycle
  date       DateTime // date for the metric
  metadata   String?  // JSON object for additional data
  createdAt  DateTime @default(now())
  
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, metric, period, date])
  @@index([userId])
  @@index([metric])
  @@index([date])
  @@map("usage_metrics")
}

// Feature Access Log
model FeatureAccess {
  id           String   @id @default(cuid())
  userId       String?
  sessionId    String?  // for anonymous users
  feature      String   // chatbot, roadmap_generator, etc.
  allowed      Boolean  // whether access was granted
  reason       String?  // denial reason (quota_exceeded, tier_required, etc.)
  metadata     String?  // JSON object for additional data
  accessedAt   DateTime @default(now())
  
  @@index([userId])
  @@index([feature])
  @@index([accessedAt])
  @@map("feature_access")
}

// Promo Codes & Discounts
model PromoCode {
  id            String   @id @default(cuid())
  code          String   @unique
  description   String?
  discountType  String   // percentage, fixed_amount, free_trial
  discountValue Float    // percentage or amount
  validFor      String?  // specific tier or 'all'
  maxUses       Int?     // maximum redemptions
  currentUses   Int      @default(0)
  validFrom     DateTime
  validUntil    DateTime
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  
  redemptions   PromoRedemption[]
  
  @@map("promo_codes")
}

// Promo Code Redemptions
model PromoRedemption {
  id          String   @id @default(cuid())
  promoCodeId String
  userId      String
  redeemedAt  DateTime @default(now())
  
  promoCode   PromoCode @relation(fields: [promoCodeId], references: [id], onDelete: Cascade)
  
  @@unique([promoCodeId, userId])
  @@map("promo_redemptions")
}

// Admin Analytics
model AnalyticsEvent {
  id         String   @id @default(cuid())
  eventType  String   // subscription_created, payment_succeeded, feature_used, etc.
  userId     String?
  sessionId  String?
  data       String   // JSON object with event data
  timestamp  DateTime @default(now())
  
  @@index([eventType])
  @@index([timestamp])
  @@map("analytics_events")
}